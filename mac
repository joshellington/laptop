#!/usr/bin/env bash
### end common-components/bash-shebang

# Welcome to the thoughtbot laptop script! Be prepared to turn your laptop (or
# desktop, no haters here) into an awesome development machine.

# This file is auto-generated. Do not edit it by hand unless you know what
# you're doing. Please see 'CONTRIBUTING.md' for more information.
### end common-components/header

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e
### end common-components/exit-trap

if [[ ! -d "$HOME/.bin/" ]]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch $HOME/.zshrc
fi

if [[ ":$PATH:" != *":$HOME/.bin:"* ]]; then
  printf 'export PATH="$HOME/.bin:$PATH"\n' >> ~/.zshrc
  export PATH="$HOME/.bin:$PATH"
fi
### end common-components/check-home-bin

fancy_echo() {
  printf "\n%b\n" "$1"
}
### end common-components/shared-functions

fancy_echo "Changing your shell to zsh ..."
  chsh -s $(which zsh)
### end common-components/zsh

if [[ -f /etc/zshenv ]]; then
  fancy_echo "Fixing OSX zsh environment bug ..."
    sudo mv /etc/{zshenv,zshrc}
fi
### end mac-components/zsh-fix

if ! command -v brew &>/dev/null; then
  fancy_echo "Installing Homebrew, a good OS X package manager ..."
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

  if ! grep -qs "recommended by brew doctor" ~/.zshrc; then
    fancy_echo "Put Homebrew location earlier in PATH ..."
      printf '\n# recommended by brew doctor\n' >> ~/.zshrc
      printf 'export PATH="/usr/local/bin:$PATH"\n' >> ~/.zshrc
      export PATH="/usr/local/bin:$PATH"
  fi
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Updating Homebrew formulas ..."
  brew update

fancy_echo "Installing Cask ..."
  brew install caskroom/cask/brew-cask
### end mac-components/homebrew

fancy_echo "Installing git ..."
  brew install git

fancy_echo "Installing MySQL ..."
  brew install mysql
  mkdir -p ~/Library/LaunchAgents
  ln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents
  launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist

fancy_echo "Installing Postgres, a good open source relational database ..."
  brew install postgres --no-python

fancy_echo "Installing Redis, a good key-value database ..."
  brew install redis

fancy_echo "Installing ImageMagick, to crop and resize images ..."
  brew install imagemagick

fancy_echo "Installing node.js ..."
  brew install node

fancy_echo "Installing PHP 5.6, see http://php-osx.liip.ch/ for help ..."
  curl -s http://php-osx.liip.ch/install.sh | bash -s 5.6

fancy_echo "Installing wget ..."
  brew install wget

fancy_echo "Installing ssh-copy-id ..."
  brew install ssh-copy-id

fancy_echo "Installing watch, to execute a program periodically and show the output ..."
  brew install watch
### end mac-components/packages

fancy_echo "Starting Postgres ..."
  brew services restart postgresql

fancy_echo "Starting MySQL ..."
  brew services restart mysql
### end mac-components/start-services

fancy_echo "Installing rbenv, to change Ruby versions ..."
  brew install rbenv

  if ! grep -qs "rbenv init" ~/.zshrc; then
    printf 'export PATH="$HOME/.rbenv/bin:$PATH"\n' >> ~/.zshrc
    printf 'eval "$(rbenv init - --no-rehash)"\n' >> ~/.zshrc

    fancy_echo "Enable shims and autocompletion ..."
      eval "$(rbenv init -)"
  fi

  export PATH="$HOME/.rbenv/bin:$PATH"

fancy_echo "Installing rbenv-gem-rehash so the shell automatically picks up binaries after installing gems with binaries..."
  brew install rbenv-gem-rehash

fancy_echo "Installing ruby-build, to install Rubies ..."
  brew install ruby-build
### end mac-components/rbenv

fancy_echo "Upgrading and linking OpenSSL ..."
  brew install openssl
  brew link openssl --force
### end mac-components/compiler-and-libraries

ruby_version="$(curl -sSL http://ruby.thoughtbot.com/latest)"

fancy_echo "Installing Ruby $ruby_version ..."
  if [ "$ruby_version" = "2.1.1" ]; then
    curl -fsSL https://gist.github.com/mislav/a18b9d7f0dc5b9efc162.txt | rbenv install --patch 2.1.1
  else
    rbenv install "$ruby_version"
  fi

fancy_echo "Setting $ruby_version as global default Ruby ..."
  rbenv global "$ruby_version"
  rbenv rehash

fancy_echo "Updating to latest Rubygems version ..."
  gem update --system

fancy_echo "Installing Bundler to install project-specific Ruby gems ..."
  gem install bundler --no-document --pre
### end common-components/ruby-environment

fancy_echo "Configuring Bundler for faster, parallel gem installation ..."
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))
### end mac-components/bundler

fancy_echo "Installing Rails ..."
  gem install rails --no-document

fancy_echo "Installing SASS ..."
  gem install sass --no-document
### end common-components/default-gems

fancy_echo "Installing CoffeeScript ..."
  npm install -g coffee-script

fancy_echo "Installing Grunt ..."
  npm install -g grunt-cli
### end common-components/default-npm-packages

fancy_echo "Installing Heroku CLI client ..."
  brew install heroku-toolbelt

fancy_echo "Installing the heroku-config plugin to pull config variables locally to be used as ENV variables ..."
  heroku plugins:install git://github.com/ddollar/heroku-config.git
### end mac-components/heroku

fancy_echo "Installing GitHub CLI client ..."
  brew install hub
### end mac-components/github

fancy_echo "Installing Google Chrome ..."
  brew cask install google-chrome

fancy_echo "Installing Firefox ..."
  brew cask install firefox

fancy_echo "Installing HipChat ..."
  brew cask install hipchat

  fancy_echo "Installing Slack ..."
  brew cask install slack

fancy_echo "Installing Sequel Pro ..."
  brew cask install sequel-pro

fancy_echo "Installing Sublime Text ..."
  brew cask install sublime-text

fancy_echo "Installing iTerm 2 ..."
  brew cask install iterm2

fancy_echo "Installing Cyberduck ..."
  brew cask install cyberduck

fancy_echo "Installing Skype ..."
  brew cask install skype

fancy_echo "Installing ImageOptim ..."
  brew cask install imageoptim

fancy_echo "Installing ImageAlpha ..."
  brew cask install imagealpha

fancy_echo "Installing FontPrep ..."
  brew cask install fontprep
### end mac-components/homebrew-cask

fancy_echo "Installing your personal additions from ~/.laptop.local ..."
  if [[ -f ~/.laptop.local ]]; then
    source ~/.laptop.local
  fi
### end common-components/personal-additions

